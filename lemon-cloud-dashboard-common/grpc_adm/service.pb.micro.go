// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: grpc/adm/service.proto

package grpc_adm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ServiceService service

type ServiceService interface {
	GetMyServiceBaseInfoList(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ServiceBaseInfoListDto, error)
	GetMyServiceInstanceInfoList(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ServiceInstanceInfoListDto, error)
}

type serviceService struct {
	c    client.Client
	name string
}

func NewServiceService(name string, c client.Client) ServiceService {
	return &serviceService{
		c:    c,
		name: name,
	}
}

func (c *serviceService) GetMyServiceBaseInfoList(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ServiceBaseInfoListDto, error) {
	req := c.c.NewRequest(c.name, "ServiceService.GetMyServiceBaseInfoList", in)
	out := new(ServiceBaseInfoListDto)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceService) GetMyServiceInstanceInfoList(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*ServiceInstanceInfoListDto, error) {
	req := c.c.NewRequest(c.name, "ServiceService.GetMyServiceInstanceInfoList", in)
	out := new(ServiceInstanceInfoListDto)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceService service

type ServiceServiceHandler interface {
	GetMyServiceBaseInfoList(context.Context, *empty.Empty, *ServiceBaseInfoListDto) error
	GetMyServiceInstanceInfoList(context.Context, *empty.Empty, *ServiceInstanceInfoListDto) error
}

func RegisterServiceServiceHandler(s server.Server, hdlr ServiceServiceHandler, opts ...server.HandlerOption) error {
	type serviceService interface {
		GetMyServiceBaseInfoList(ctx context.Context, in *empty.Empty, out *ServiceBaseInfoListDto) error
		GetMyServiceInstanceInfoList(ctx context.Context, in *empty.Empty, out *ServiceInstanceInfoListDto) error
	}
	type ServiceService struct {
		serviceService
	}
	h := &serviceServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ServiceService{h}, opts...))
}

type serviceServiceHandler struct {
	ServiceServiceHandler
}

func (h *serviceServiceHandler) GetMyServiceBaseInfoList(ctx context.Context, in *empty.Empty, out *ServiceBaseInfoListDto) error {
	return h.ServiceServiceHandler.GetMyServiceBaseInfoList(ctx, in, out)
}

func (h *serviceServiceHandler) GetMyServiceInstanceInfoList(ctx context.Context, in *empty.Empty, out *ServiceInstanceInfoListDto) error {
	return h.ServiceServiceHandler.GetMyServiceInstanceInfoList(ctx, in, out)
}
